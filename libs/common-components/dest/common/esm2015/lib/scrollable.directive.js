import * as tslib_1 from "tslib";
import { Directive, ElementRef, HostListener, Input } from '@angular/core';
import { NavigateService } from "./navigate.service";
import { PagePreloadService } from "./page-preload.service";
import { ZoomService } from "./zoom.service";
import { WindowService } from "./window.service";
import { ViewportService } from "./viewport.service";
import * as jquery from "jquery";
const $ = jquery;
let ScrollableDirective = class ScrollableDirective {
    constructor(_elementRef, _navigateService, _pagePreloadService, _zoomService, _windowService, _viewportService) {
        this._elementRef = _elementRef;
        this._navigateService = _navigateService;
        this._pagePreloadService = _pagePreloadService;
        this._zoomService = _zoomService;
        this._windowService = _windowService;
        this._viewportService = _viewportService;
        this.zoom = 100;
        this.zoom = _zoomService.zoom ? _zoomService.zoom : this.zoom;
        _zoomService.zoomChange.subscribe((val) => {
            this.zoom = val ? val : this.zoom;
            this.refresh();
        });
    }
    ngAfterViewInit() {
        this.zoom = this._zoomService.zoom ? this._zoomService.zoom : this.zoom;
        this._navigateService.navigate.subscribe((value => {
            this.currentPage = value;
            this.scrollToPage(value);
        }));
        this.refresh();
    }
    scrolling() {
        this.refresh();
    }
    resizing() {
        this.refresh();
    }
    scrollToPage(pageNumber) {
        const el = this._elementRef.nativeElement;
        const page = this.getPage(pageNumber);
        const prev = pageNumber > 0 ? this.getPage(pageNumber - 1) : null;
        const isSameTop = (prev && $(prev).offset().top === $(page).offset().top);
        if (this._viewportService.checkInViewport(page, this.zoom) && isSameTop) {
            return;
        }
        const pagesHeight = this.calculateOffset(pageNumber);
        const options = {
            left: 0,
            top: pagesHeight
        };
        if (el) {
            el.scrollTo(options);
        }
    }
    getChildren() {
        const el = this._elementRef ? this._elementRef.nativeElement : null;
        if (el) {
            return el.children.item(0).children;
        }
    }
    getPage(pageNumber) {
        const el = this._elementRef ? this._elementRef.nativeElement : null;
        if (el) {
            return el.children.item(0).children.item(pageNumber - 1);
        }
    }
    calculateOffset(pageNumber) {
        const count = this.ifFirefox() ? 1 : this.countPagesOnWidth();
        const margin = this._windowService.isDesktop() ? 40 : 10;
        let pagesHeight = 0;
        for (let i = 1; i < pageNumber / count; i++) {
            const item = this.getPage(i);
            const clientHeight = item ? item.clientHeight : 0;
            pagesHeight += clientHeight > 0 ? clientHeight * this.getZoom() + margin : 0;
        }
        return pagesHeight;
    }
    countPagesOnWidth() {
        const pageEl = this.getPage(1);
        const offset = 150;
        const count = Math.floor((this.getWidth() - offset) / (pageEl.getBoundingClientRect().width * this.getZoom()));
        return count === 0 ? 1 : count;
    }
    ifFirefox() {
        return navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
    }
    refresh() {
        let page;
        let currentPageSet = false;
        const pageElem = this.getPage(this.currentPage);
        const currentPageRect = this.currentPage && pageElem ? pageElem.getBoundingClientRect() : null;
        for (page = 1; page < this.getChildren().length + 1; page++) {
            const element = this.getPage(page);
            if (this._viewportService.checkInViewport(element, this.zoom)) {
                if (!currentPageSet) {
                    if (!this.currentPage || !pageElem || (this.currentPage && currentPageRect && element.getBoundingClientRect().top !== currentPageRect.top)) {
                        this.currentPage = page;
                        this._navigateService.currentPage = page;
                    }
                    currentPageSet = true;
                }
                this._pagePreloadService.changeLastPageInView(page);
            }
        }
    }
    ngOnChanges(changes) {
        this.refresh();
    }
    ngOnInit() {
        this.zoom = this._zoomService.zoom ? this._zoomService.zoom : this.zoom;
    }
    getWidth() {
        return this._elementRef ? this._elementRef.nativeElement.offsetWidth : window.innerWidth;
    }
    getZoom() {
        return this.zoom / 100;
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], ScrollableDirective.prototype, "onRefresh", void 0);
tslib_1.__decorate([
    HostListener('scroll'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], ScrollableDirective.prototype, "scrolling", null);
tslib_1.__decorate([
    HostListener('window:resize'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], ScrollableDirective.prototype, "resizing", null);
ScrollableDirective = tslib_1.__decorate([
    Directive({
        selector: '[gdScrollable]'
    }),
    tslib_1.__metadata("design:paramtypes", [ElementRef,
        NavigateService,
        PagePreloadService,
        ZoomService,
        WindowService,
        ViewportService])
], ScrollableDirective);
export { ScrollableDirective };
//# sourceMappingURL=data:application/json;base64,