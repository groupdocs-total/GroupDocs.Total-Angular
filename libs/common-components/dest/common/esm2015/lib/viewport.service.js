import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import * as jquery from "jquery";
import * as i0 from "@angular/core";
const $ = jquery;
let ViewportService = class ViewportService {
    constructor() {
    }
    checkInViewport(el, zoom = 100, leftOffset = 0, deltaX = 0.5) {
        if (!el) {
            return false;
        }
        const x = deltaX;
        const y = 0.5;
        const win = $(window);
        const viewport = {
            top: win.scrollTop(),
            left: win.scrollLeft() + leftOffset,
            right: win.scrollLeft() + win.width() - 10,
            bottom: win.scrollTop() + win.height()
        };
        if (isNaN(zoom)) {
            zoom = 100;
        }
        const zoomN = zoom / 100;
        const height = $(el).outerHeight() * (zoomN);
        const width = $(el).outerWidth() * (zoomN);
        if (!width || !height) {
            return false;
        }
        const bounds = $(el).offset();
        const right = (bounds.left * (zoomN)) + width;
        const bottom = (bounds.top * (zoomN)) + height;
        const visible = (!(viewport.right < (bounds.left * (zoomN)) || viewport.left > right || viewport.bottom < (bounds.top * (zoomN)) || viewport.top > bottom));
        if (!visible) {
            return false;
        }
        const deltas = {
            top: Math.min(1, (bottom - viewport.top) / height),
            bottom: Math.min(1, (viewport.bottom - (bounds.top * (zoomN))) / height),
            left: Math.min(1, (right - viewport.left) / width),
            right: Math.min(1, (viewport.right - (bounds.left * (zoomN))) / width)
        };
        return (deltas.left * deltas.right) >= x && (deltas.top * deltas.bottom) >= y;
    }
};
ViewportService.ngInjectableDef = i0.defineInjectable({ factory: function ViewportService_Factory() { return new ViewportService(); }, token: ViewportService, providedIn: "root" });
ViewportService = tslib_1.__decorate([
    Injectable({
        providedIn: 'root'
    }),
    tslib_1.__metadata("design:paramtypes", [])
], ViewportService);
export { ViewportService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlld3BvcnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bncm91cGRvY3MuZXhhbXBsZXMuYW5ndWxhci9jb21tb24tY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi92aWV3cG9ydC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sS0FBSyxNQUFNLE1BQU0sUUFBUSxDQUFDOztBQUNqQyxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUM7QUFLakIsSUFBYSxlQUFlLEdBQTVCLE1BQWEsZUFBZTtJQUUxQjtJQUNBLENBQUM7SUFFRCxlQUFlLENBQUMsRUFBRSxFQUFFLE9BQWUsR0FBRyxFQUFFLGFBQXFCLENBQUMsRUFBRSxTQUFpQixHQUFHO1FBQ2xGLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDUCxPQUFPLEtBQUssQ0FBQztTQUNkO1FBQ0QsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQ2pCLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUVkLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV0QixNQUFNLFFBQVEsR0FBRztZQUNmLEdBQUcsRUFBRSxHQUFHLENBQUMsU0FBUyxFQUFFO1lBQ3BCLElBQUksRUFBRSxHQUFHLENBQUMsVUFBVSxFQUFFLEdBQUcsVUFBVTtZQUNuQyxLQUFLLEVBQUUsR0FBRyxDQUFDLFVBQVUsRUFBRSxHQUFHLEdBQUcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFO1lBQzFDLE1BQU0sRUFBRSxHQUFHLENBQUMsU0FBUyxFQUFFLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRTtTQUN2QyxDQUFDO1FBR0YsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDZixJQUFJLEdBQUcsR0FBRyxDQUFDO1NBQ1o7UUFFRCxNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsR0FBRyxDQUFDO1FBQ3pCLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzdDLE1BQU0sS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRTNDLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDckIsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUVELE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUM5QixNQUFNLEtBQUssR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUM5QyxNQUFNLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztRQUUvQyxNQUFNLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksUUFBUSxDQUFDLElBQUksR0FBRyxLQUFLLElBQUksUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUU1SixJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ1osT0FBTyxLQUFLLENBQUM7U0FDZDtRQUVELE1BQU0sTUFBTSxHQUFHO1lBQ2IsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUM7WUFDbEQsTUFBTSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO1lBQ3hFLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBQ2xELEtBQUssRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztTQUN2RSxDQUFDO1FBRUYsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoRixDQUFDO0NBQ0YsQ0FBQTs7QUFyRFksZUFBZTtJQUgzQixVQUFVLENBQUM7UUFDVixVQUFVLEVBQUUsTUFBTTtLQUNuQixDQUFDOztHQUNXLGVBQWUsQ0FxRDNCO1NBckRZLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMganF1ZXJ5IGZyb20gXCJqcXVlcnlcIjtcbmNvbnN0ICQgPSBqcXVlcnk7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFZpZXdwb3J0U2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gIH1cblxuICBjaGVja0luVmlld3BvcnQoZWwsIHpvb206IG51bWJlciA9IDEwMCwgbGVmdE9mZnNldDogbnVtYmVyID0gMCwgZGVsdGFYOiBudW1iZXIgPSAwLjUpIHtcbiAgICBpZiAoIWVsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHggPSBkZWx0YVg7XG4gICAgY29uc3QgeSA9IDAuNTtcblxuICAgIGNvbnN0IHdpbiA9ICQod2luZG93KTtcblxuICAgIGNvbnN0IHZpZXdwb3J0ID0ge1xuICAgICAgdG9wOiB3aW4uc2Nyb2xsVG9wKCksXG4gICAgICBsZWZ0OiB3aW4uc2Nyb2xsTGVmdCgpICsgbGVmdE9mZnNldCxcbiAgICAgIHJpZ2h0OiB3aW4uc2Nyb2xsTGVmdCgpICsgd2luLndpZHRoKCkgLSAxMCxcbiAgICAgIGJvdHRvbTogd2luLnNjcm9sbFRvcCgpICsgd2luLmhlaWdodCgpXG4gICAgfTtcblxuXG4gICAgaWYgKGlzTmFOKHpvb20pKSB7XG4gICAgICB6b29tID0gMTAwO1xuICAgIH1cblxuICAgIGNvbnN0IHpvb21OID0gem9vbSAvIDEwMDtcbiAgICBjb25zdCBoZWlnaHQgPSAkKGVsKS5vdXRlckhlaWdodCgpICogKHpvb21OKTtcbiAgICBjb25zdCB3aWR0aCA9ICQoZWwpLm91dGVyV2lkdGgoKSAqICh6b29tTik7XG5cbiAgICBpZiAoIXdpZHRoIHx8ICFoZWlnaHQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCBib3VuZHMgPSAkKGVsKS5vZmZzZXQoKTtcbiAgICBjb25zdCByaWdodCA9IChib3VuZHMubGVmdCAqICh6b29tTikpICsgd2lkdGg7XG4gICAgY29uc3QgYm90dG9tID0gKGJvdW5kcy50b3AgKiAoem9vbU4pKSArIGhlaWdodDtcblxuICAgIGNvbnN0IHZpc2libGUgPSAoISh2aWV3cG9ydC5yaWdodCA8IChib3VuZHMubGVmdCAqICh6b29tTikpIHx8IHZpZXdwb3J0LmxlZnQgPiByaWdodCB8fCB2aWV3cG9ydC5ib3R0b20gPCAoYm91bmRzLnRvcCAqICh6b29tTikpIHx8IHZpZXdwb3J0LnRvcCA+IGJvdHRvbSkpO1xuXG4gICAgaWYgKCF2aXNpYmxlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgZGVsdGFzID0ge1xuICAgICAgdG9wOiBNYXRoLm1pbigxLCAoYm90dG9tIC0gdmlld3BvcnQudG9wKSAvIGhlaWdodCksXG4gICAgICBib3R0b206IE1hdGgubWluKDEsICh2aWV3cG9ydC5ib3R0b20gLSAoYm91bmRzLnRvcCAqICh6b29tTikpKSAvIGhlaWdodCksXG4gICAgICBsZWZ0OiBNYXRoLm1pbigxLCAocmlnaHQgLSB2aWV3cG9ydC5sZWZ0KSAvIHdpZHRoKSxcbiAgICAgIHJpZ2h0OiBNYXRoLm1pbigxLCAodmlld3BvcnQucmlnaHQgLSAoYm91bmRzLmxlZnQgKiAoem9vbU4pKSkgLyB3aWR0aClcbiAgICB9O1xuXG4gICAgcmV0dXJuIChkZWx0YXMubGVmdCAqIGRlbHRhcy5yaWdodCkgPj0geCAmJiAoZGVsdGFzLnRvcCAqIGRlbHRhcy5ib3R0b20pID49IHk7XG4gIH1cbn1cbiJdfQ==