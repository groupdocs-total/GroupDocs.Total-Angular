import { OnDestroy, OnInit, ElementRef } from '@angular/core';
import { OperationState, ParseResult, Template, TemplateId } from '../app-models';
import { RenameModalComponent } from '../rename-modal/rename-modal.component';
import { ConfirmationModalComponent } from '../confirmation-modal/confirmation-modal.component';
import { ModalService } from "@groupdocs.examples.angular/common-components";
import { ParserService } from '../parser.service';
import { TemplateService } from '../template.service';
import { SourceFileService } from '../source-file.service';
import { UtilsService } from '../utils.service';
import { PlaceholderService } from '../placeholder.service';
import { TableViewerComponent } from '../table-viewer/table-viewer.component';
export declare class SidePanelComponent implements OnInit, OnDestroy {
    private _modalService;
    private _parserService;
    private _sourceFileService;
    private _templateService;
    private _utilsService;
    private _placeholderService;
    private _currentTemplateChangedSubscription;
    private _templateAddedSubscription;
    private _templateRemovedSubscription;
    private _currentTemplate;
    private _currentTemplateModifiedSubscription;
    private _parseState;
    templateNameModal: RenameModalComponent;
    templateRemoveModal: ConfirmationModalComponent;
    uploadTemplate: ElementRef;
    tableViewer: TableViewerComponent;
    constructor(_modalService: ModalService, _parserService: ParserService, _sourceFileService: SourceFileService, _templateService: TemplateService, _utilsService: UtilsService, _placeholderService: PlaceholderService);
    templateIds: TemplateId[];
    isTemplateMode: boolean;
    isDataMode: boolean;
    readonly parseState: OperationState<ParseResult[]>;
    currentTemplate: Template;
    ngOnDestroy(): void;
    ngOnInit(): void;
    manageTemplates(): void;
    isCurrentTemplate(templateId: TemplateId): boolean;
    selectTemplateClick(templateId: TemplateId): void;
    createTemplateClick(): void;
    renameTemplateClick(templateId: TemplateId): void;
    templateNameModalAccept(event: any): void;
    removeTemplateClick(templateId: TemplateId): void;
    templateRemoveModalAccept(operationId: string): void;
    downloadTemplateClick(templateId: TemplateId): void;
    onFileSelected(event: any): void;
    showData(): void;
    parse(): void;
    downloadResultsAsCsv(): void;
    isArray(obj: any): boolean;
    showTableValue(value: any): void;
    private removeTemplateId;
}
