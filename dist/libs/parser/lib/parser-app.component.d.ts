import { OnInit } from '@angular/core';
import { FileModel, ModalService, NavigateService, PasswordService, UploadFilesService, WindowService, ZoomService } from "@groupdocs.examples.angular/common-components";
import { DocumentDescription, Template } from './app-models';
import { ParserService } from './parser.service';
import { ParserConfig } from './parser-config';
import { TemplateService } from './template.service';
import { SourceFileService } from './source-file.service';
import { PlaceholderService } from './placeholder.service';
import { DocumentPageService } from './document-page.service';
export declare class ParserAppComponent implements OnInit {
    private _modalService;
    private _parserService;
    private _sourceFileService;
    private _templateService;
    private _zoomService;
    private _navigateService;
    private _placeholderService;
    private _documentPageService;
    private _uploadFilesService;
    private _passwordService;
    sourceFile: string;
    private readonly CREATE_FIELD_MODE;
    readonly browseFilesModal: string;
    private _document;
    template: Template;
    parserConfig: ParserConfig;
    filePassword: string;
    documentError: string;
    isApiAvaible: boolean;
    fileWasDropped: boolean;
    files: FileModel[];
    constructor(_modalService: ModalService, _parserService: ParserService, _sourceFileService: SourceFileService, _templateService: TemplateService, _zoomService: ZoomService, _navigateService: NavigateService, _placeholderService: PlaceholderService, _documentPageService: DocumentPageService, _uploadFilesService: UploadFilesService, _passwordService: PasswordService, windowService: WindowService);
    zoomIn(): void;
    zoomOut(): void;
    addFieldClick(): void;
    addTableClick(): void;
    isFileLoaded(): DocumentDescription;
    openModal(id: string, fileShouldBeLoaded: boolean): void;
    selectDir($event: string): void;
    upload($event: string): void;
    fileDropped($event: any): void;
    selectFile($event: string, password: string, modalId: string): void;
    readonly rewriteConfig: boolean;
    readonly uploadConfig: boolean;
    readonly browseConfig: boolean;
    readonly returnUrl: string;
    ngOnInit(): void;
    reloadCurrentPage(): void;
    private loadDocumentDescription;
    readonly document: DocumentDescription;
    private refreshZoom;
    private getFitToWidth;
    private ptToPx;
}
