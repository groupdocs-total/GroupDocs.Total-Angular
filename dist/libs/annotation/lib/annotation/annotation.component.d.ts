import { AfterViewInit, OnInit, AfterViewChecked } from '@angular/core';
import { AnnotationData, Dimension, Position } from "../annotation-models";
import { ActiveAnnotationService } from "../active-annotation.service";
import { Formatting, ZoomService } from "@groupdocs.examples.angular/common-components";
import { RemoveAnnotationService } from "../remove-annotation.service";
import { CommentAnnotationService } from "../comment-annotation.service";
export declare class AnnotationComponent implements OnInit, AfterViewInit, AfterViewChecked {
    private _activeAnnotationService;
    private _removeAnnotationService;
    private _commentAnnotationService;
    private _zoomService;
    id: number;
    position: Position;
    leftTop: Position;
    type: string;
    pageWidth: number;
    pageHeight: number;
    active: boolean;
    dimension: Dimension;
    pageNumber: number;
    textValue: string;
    pathValue: string;
    distanceValue: string;
    pointsValue: string;
    svgPath: string;
    formatting: Formatting;
    private oldPosition;
    private points;
    private endPosition;
    constructor(_activeAnnotationService: ActiveAnnotationService, _removeAnnotationService: RemoveAnnotationService, _commentAnnotationService: CommentAnnotationService, _zoomService: ZoomService);
    static isOnPage(position: any): any;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    activation(): void;
    width($event: any): void;
    height($event: any): void;
    left($event: any): void;
    top($event: any): void;
    private refreshLeftTop;
    private correctPosition;
    dragOver($event: DragEvent): void;
    dragStart($event: DragEvent): void;
    initPoint(): void;
    dragging($event: any): void;
    getAnnotationClass(): "" | "gd-annotation-wrapper-border gd-text-annotation" | "gd-annotation-wrapper-border gd-text-annotation gd-text-strikeout-annotation" | "gd-annotation-wrapper-border gd-text-annotation gd-text-underline-annotation" | "gd-annotation-wrapper-border gd-text-redaction-annotation" | "gd-annotation-wrapper-border gd-text-replacement-annotation" | "gd-annotation-wrapper-border";
    isStrikeoutOrUnderline(): boolean;
    isTextReplacement(): boolean;
    saveText(value: string): void;
    draw(position: Position): void;
    setStyles(): {
        'stroke': string;
        'stroke-width': number;
        'fill-opacity': number;
        'id': string;
        'class': string;
    };
    isPolyline(): boolean;
    private calcPositionAndDimension;
    calcDimensions(currentPosition: Position): void;
    getHeight(): number;
    getWidth(): number;
    private checkDragging;
    isPoint(): boolean;
    isSVG(): boolean;
    isDistance(): boolean;
    distanceTextOptions(): {
        'font-size': string;
    };
    isPath(): boolean;
    private setEndPosition;
    private addPoint;
    private getDistance;
    bottom(): string;
    head(): string;
    getTextX(): number;
    isText(): boolean;
    getFormatting(): Formatting;
    saveFormatting($event: Formatting): void;
    remove(): void;
    getMenuShift(): number;
    getMenuType(): string;
    addComment(): void;
    private setTextFocus;
    textAreaHeight(key: any, textarea: any): void;
    hideMenu($event: Event): void;
    getAnnotationData(): AnnotationData;
    private getSvgPath;
    private onPage;
}
