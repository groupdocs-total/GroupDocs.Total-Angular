/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Observable } from "rxjs";
import { AR, CA, CS, DA, DE, EL, EN, ES, FIL, FR, HE, HI, ID, IT, JA, KK, KO, MS, NL, PL, PT, RO, RU, SV, TH, TR, UK, VI, ZHHANS, ZHHANT } from "./translations";
export class StaticTranslateLoader {
    /**
     * @param {?} translations
     */
    constructor(translations) {
        this.translations = {};
        this.translations['ar'] = Object.assign({}, AR, translations['ar']);
        this.translations['ca'] = Object.assign({}, CA, translations['ca']);
        this.translations['cs'] = Object.assign({}, CS, translations['cs']);
        this.translations['da'] = Object.assign({}, DA, translations['da']);
        this.translations['de'] = Object.assign({}, DE, translations['de']);
        this.translations['el'] = Object.assign({}, EL, translations['el']);
        this.translations['en'] = Object.assign({}, EN, translations['en']);
        this.translations['es'] = Object.assign({}, ES, translations['es']);
        this.translations['fil'] = Object.assign({}, FIL, translations['fil']);
        this.translations['fr'] = Object.assign({}, FR, translations['fr']);
        this.translations['he'] = Object.assign({}, HE, translations['he']);
        this.translations['hi'] = Object.assign({}, HI, translations['hi']);
        this.translations['id'] = Object.assign({}, ID, translations['id']);
        this.translations['it'] = Object.assign({}, IT, translations['it']);
        this.translations['ja'] = Object.assign({}, JA, translations['ja']);
        this.translations['kk'] = Object.assign({}, KK, translations['kk']);
        this.translations['ko'] = Object.assign({}, KO, translations['ko']);
        this.translations['ms'] = Object.assign({}, MS, translations['ms']);
        this.translations['nl'] = Object.assign({}, NL, translations['nl']);
        this.translations['pl'] = Object.assign({}, PL, translations['pl']);
        this.translations['pt'] = Object.assign({}, PT, translations['pt']);
        this.translations['ro'] = Object.assign({}, RO, translations['ro']);
        this.translations['ru'] = Object.assign({}, RU, translations['ru']);
        this.translations['sv'] = Object.assign({}, SV, translations['sv']);
        this.translations['th'] = Object.assign({}, TH, translations['th']);
        this.translations['tr'] = Object.assign({}, TR, translations['tr']);
        this.translations['uk'] = Object.assign({}, UK, translations['uk']);
        this.translations['vi'] = Object.assign({}, VI, translations['vi']);
        this.translations['zh-hans'] = Object.assign({}, ZHHANS, translations['zh-hans']);
        this.translations['zh-hant'] = Object.assign({}, ZHHANT, translations['zh-hant']);
    }
    /**
     * @param {?} lang
     * @return {?}
     */
    getTranslation(lang) {
        /** @type {?} */
        const translation = this.translations[lang]
            ? this.translations[lang]
            : this.translations[this.defaultLanguage];
        return new Observable((/**
         * @param {?} subscriber
         * @return {?}
         */
        subscriber => {
            subscriber.next(translation);
        }));
    }
}
if (false) {
    /** @type {?} */
    StaticTranslateLoader.prototype.translations;
    /** @type {?} */
    StaticTranslateLoader.prototype.defaultLanguage;
}
//# sourceMappingURL=data:application/json;base64,